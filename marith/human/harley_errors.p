
vars Elist = [

[0 1 [1 1]]
[1 0 [1 5]]
[0 2 [2 8]]
[2 0 [2 12]]
[0 3 [3 3]]
[3 0 [3 9]]
[0 4 [4 3]]
[4 0 [4 10]]
[0 5 [5 5]]
[5 0 [5 9]]
[0 6 [6 5]]
[6 0 [6 4]]
[0 7 [7 6]]
[7 0 [7 15]]
[0 8 [8 10]]
[8 0 [8 12]]
[0 9 [9 4]]
[9 0 [9 7]]
[1 1 [2 1]]
[1 2 [1 2] [12 1]]
[1 3 [1 2]]
[3 1 [6 1] [31 1]]
[1 4 [1 3]]
[4 1 [41 1]]
[2 2 [2 6]]
[1 5 [1 1]]
[5 1 [6 4]]
[1 6 [1 1]]
[1 7 [1 2] [8 1]]
[7 1 [8 1] [71 1]]
[1 8 [0 2] [1 3] [18 1]]
[2 4 [6 2] [12 2] [16 1] [18 1]]
[4 2 [4 1] [6 2] [12 2] [40 1]]
[1 9 [1 2] [11 1]]
[9 1 [1 1] [8 1]]
[3 3 [6 6]]
[2 5 [15 1] [25 1]]
[5 2 [12 1] [20 1]]
[2 6 [1 2] [6 2] [8 2] [14 1] [16 11] [18 8]]
[6 2 [8 1] [16 1] [18 3]]
[3 4 [34 1]]
[4 3 [24 1]]
[2 7 [7 1] [12 2] [18 1]]
[7 2 [12 1] [15 1] [20 1] [72 1]]
[3 5 [35 3]]
[2 8 [8 2] [14 1] [18 8]]
[8 2 [8 2] [12 1] [18 1] [60 1] [82 1]]
[4 4 [4 1] [12 2] [24 2] [44 1]]
[2 9 [16 1] [19 1]]
[9 2 [9 1] [12 2]]
[3 6 [6 1] [16 4] [24 4] [36 3]]
[6 3 [9 1] [12 1] [15 1] [16 3] [20 1] [21 5] [24 8] [28 2] [63 1]]
[4 5 [9 1] [10 1] [40 4] [45 3] [54 1]]
[5 4 [54 1]]
[3 7 [12 1] [17 1] [27 3]]
[7 3 [12 1] [24 1] [27 1] [71 1]]
[3 8 [0 1] [16 1] [18 4] [21 3]]
[8 3 [16 2] [18 2] [20 1] [21 4] [26 1] [28 2] [32 1] [44 1]]
[4 6 [12 1] [16 1] [22 1] [28 1] [30 1] [32 3] [36 2] [42 2] [48 1] [64 1]]
[6 4 [28 1] [32 3] [36 1] [ 42 1] [ 64 1]]
[5 5 [5 1] [10 3] [15 1] [20 1] [35 2]]
[3 9 [18 29] [21 2] [22 1] [23 1] [24 2] [28 1] [36 1] [37 1] [39 1] [63 1] [72 2]]
[9 3 [18 10] [21 11] [24 5] [25 1] [36 1] [37 1] [63 2] [72 1]]
[4 7 [24 9] [32 11] [36 5] [40 1] [48 1]]
[7 4 [14 1] [18 1] [21 1] [24 3] [32 5] [36 1] [38 2] [42 1] [48 1] [49 1]]
[5 6 [20 2] [32 1] [35 3] [36 1] [42 1] [50 1] [54 1] [56 2]]
[6 5 [35 3]]
[4 8 [16 1] [20 1] [24 14] [26 1] [28 6] [36 3] [40 2] [48 9] [84 2]]
[8 4 [22 1] [24 26] [27 1] [28 12] [30 1] [36 8] [40 3] [42 2] [48 3] [64 1] [84 1]]
[5 7 [12 1] [30 2] [36 1] [40 4] [42 2] [45 3]]
[7 5 [20 1] [25 1] [30 5] [36 1] [40 3] [45 3] [75 1]]
[4 9 [28 3] [32 9 ] [34 1] [39 1] [40 1] [42 1] [45 2] [46 1] [ 49 5] [63 2]]
[9 4 [16 1] [28 1] [32 8] [42 2] [45 1] [54 1]]
[6 6 [6 1] [24 1] [66 1]]
[5 8 [30 1] [32 1] [34 1] [35 2] [45 5]]
[8 5 [20 1] [30 4] [35 2] [38 1] [42 1] [45 2]]
[6 7 [32 6] [35 1] [36 2] [40 1] [41 1] [48 2] [49 4] [50 1] [54 2] [56 7] [58 1] [60 1] [63 2] [65 1]]
[7 6 [30 1] [32 5] [35 3] [36 10] [37 1] [40 3] [43 1] [48 2] [49 2] [50 1] [52 1] [54 2] [56 8] [65 1] [72 2]]
[5 9 [30 1] [35 12] [36 2] [40 8] [46 1] [54 7] [55 1] [65 1]]
[9 5 [30 2] [35 10] [40 8] [50 1] [54 2] [95 4]]
[6 8 [24 1] [36 1] [38 1] [40 1] [42 14] [46 4] [54 8] [60 1]]
[8 6 [16 1] [24 3] [28 1] [32 1] [40 3] [42 14] [45 1]  [46 2] [50 1] [52 1] [54 4] [56 4] [64 2] [68 1]]
[7 7 [7 1] [21 1] [29 1] [35 1] [36 3] [41 2] [42 1] [47 1] [48 2] [56 1] [79 2]]
[6 9 [30 1] [36 8] [40 1] [42 6] [43 1] [45 7] [46 4] [48 3] [49 4] [53 3] [56 11] [58 1] [60 1] [63 15] [64 2] [68 1] [72 4] [74 1]]
[9 6 [36 12] [37 1] [40 3] [42 4] [45 7] [46 2] [48 3] [49 1] [50 2] [55 1] [56 11] [58 1] [63 3] [64 1] [72 1] [96 1]]
[7 8 [21 1] [35 1] [42 3] [46 1] [47 1] [48 3] [49 3] [53 1] [54 17] [62 1] [63 1] [72 2] [76 1]]
[8 7 [24 1] [25 2] [36 1] [40 1] [42 5] [46 1] [48 4] [49 3] [52 1] [54 12] [57 1] [63 5] [72 2]]
[7 9 [30 1] [35 2] [36 7] [40 1] [42 3] [43 1] [45 1] [48 2] [49 5] [50 1] [53 1] [54 6] [56 8] [62 2] [64 2] [72 2] [81 1]]
[9 7 [27 1] [30 1] [36 7] [40 1] [42 2] [46 1] [48 1] [49 5] [52 1] [54 5] [56 11] [59 1] [62 4] [64 4] [72 4] [81 1]]
[8 8 [8 1] [16 1] [48 4] [61 1] [63 3] [66 1] [72 1] [80 1] [81 1]]
[8 9 [53 1] [54 5] [56 7] [63 6] [64 3] [67 1] [68 1] [81 1] [89 1]]
[9 8 [36 2] [37 1] [48 3] [50 1] [56 5] [58 1] [63 1] [70 1] [71 1] [73 1] [80 1] [81 2] [82 1]]
[9 9 [18 3]]
];

define check;
    vars item,e,es,t,fp,count,d1,d2;
    for item in Elist do
        item --> [?d1 ?d2 ??es];
        pr(d1><'x'><d2><': ');
        1 -> count;
        for e in es do
            e --> [?fp ?t];
            pr(fp);
            if t /= 1 then
                pr('('><t><')');
            endif;
            count+1->count;
            if count = 10 then nl(1); pr('\t'); 1 -> count; else pr('  '); endif;
        endfor;
    nl(1);
    readline()->;
    ved_clear();
    endfor;
enddefine;


define convert() -> (a,total);
    vars item,e,es,t,fp,count,d1,d2;
    vars p,o,total=0,miss=0,pre;
    newarray([0 ^N_problems 1 ^N_products],0) -> a;
    for item in Elist do
        item --> [?d1 ?d2 ??es];
        2+((d1-First_multiplier)*N_tables)+(d2-First_multiplier) -> p;
        for e in es do
            e --> [?fp ?t];
            if product_list matches [??pre ^fp ==] then
                length(pre)+1 -> o;
                a(p,o) + t -> a(p,o);
            else
                [skipping product ^fp ( ^t )] =>
                miss + t -> miss;
            endif;
            total + t -> total;
        endfor;
    endfor;

    pr('Missed a total of '><miss><' products out of '><total);
    prnum(100*miss/total,4,5); pr('%\n');

enddefine;

convert() -> (a,total);
count_errors(a,false,total);
